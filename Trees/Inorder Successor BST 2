/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code here
        TreeNode parent = root;

        if (root == null ) return root;
        
        if (root.right == null && root.left == null) return null;

        root = searchNodeHelper(root,p.val);

        if (root.right != null){
            return minValueHelper(root.right);
        }else{

            TreeNode temp = parent;

            while (true){

                if (temp.val < p.val){
                    temp = temp.right;
                }else if (temp.val > p.val){
                    parent = temp;
                    temp = temp.left;
                }else if (temp.val == p.val){
                    return parent;
                }
            }
        }
    }
    
        private TreeNode searchNodeHelper(TreeNode root, int val){

        if (root == null || root.val == val)
            return root;

        if (root.val < val)
            return searchNodeHelper(root.right, val);

        return searchNodeHelper(root.left, val);

    }

    private TreeNode minValueHelper(TreeNode temp){

        if (temp == null) return temp;

        while (temp.left != null){
            temp = temp.left;
        }

        return temp;
    }
}