class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        
        Arrays.sort(nums);
        
        List<Integer> arr =  new ArrayList<>();

        for (int i = 0 ; i <  nums.length ;i++){
            arr.add(nums[i]);
        }
        
        List<List<Integer>> list = new ArrayList<>();
        HashSet<List<Integer>> set = new HashSet<>();
        subsetsWithDupHelper(arr, list, new ArrayList<>(), set);
        
        return list;
    }
    
    public void subsetsWithDupHelper(List<Integer> arr, List<List<Integer>> list, List<Integer> chosen, HashSet<List<Integer>> set){
        
        if (arr.size() == 0){
            if(!set.contains(chosen)){
                list.add(new ArrayList<>(chosen));
                set.add(chosen);
            }
        }else {
         
            // choose
            int temp = arr.get(0);
            arr.remove(0);
            chosen.add(temp);
            
            // explore with
            subsetsWithDupHelper(arr,list,chosen,set);
            
            chosen.remove(chosen.size() -1);
            
            //explore without
            subsetsWithDupHelper(arr,list,chosen,set);
            
            // un-choose
            arr.add(0,temp);
            
        }
    }
}