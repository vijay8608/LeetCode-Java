class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), s, 0);
        return list;
    }
    
    public void backtrack(List<List<String>> list, List<String> tempList, String s, int start){
        System.out.println("backtrack ( "+list+", "+tempList+", "+s+", "+start+" )");
        if(start == s.length()){
            list.add(new ArrayList<>(tempList));
            System.out.println(list);
        }
            
        else{
          for(int i = start; i < s.length(); i++){
              System.out.println(isPalindrome(s, start, i));
             if(isPalindrome(s, start, i)){
                tempList.add(s.substring(start, i + 1));
                backtrack(list, tempList, s, i + 1);
                tempList.remove(tempList.size() - 1);
                 System.out.println("removing");
             }
          }
        }
    }
    
    // backtrack ( [], [], aab, 0 )
    // true
    // backtrack ( [], [a], aab, 1 )
    // true
    // backtrack ( [], [a, a], aab, 2 )
    // true
    // backtrack ( [], [a, a, b], aab, 3 )
    // [[a, a, b]]
    // here
    // here
    // false
    // here
    // true
    // backtrack ( [[a, a, b]], [aa], aab, 2 )
    // true
    // backtrack ( [[a, a, b]], [aa, b], aab, 3 )
    // [[a, a, b], [aa, b]]
    // here
    // here
    // false

    public boolean isPalindrome(String s, int low, int high){
        while(low < high)
          if(s.charAt(low++) != s.charAt(high--)) return false;
       return true;
    } 


}