class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        Arrays.sort(candidates);
        List<Integer> arr =  new ArrayList<>();

        for (int i = 0 ; i <  candidates.length ;i++){
            arr.add(candidates[i]);
        }
        
        List<List<Integer>> list = new ArrayList<>();
        HashSet<List<Integer>> set = new HashSet<>();
        combinationSumHelper(arr, list, target, new ArrayList<>() ,set,0);
        
        return list;
    }
    
    public void combinationSumHelper(List<Integer> arr, List<List<Integer>> list, int target, List<Integer> chosen,HashSet<List<Integer>> set, int pos ){
        
        if (target == 0){
            if(!set.contains(chosen)){
                list.add(new ArrayList<>(chosen));
                set.add(chosen);
            }    
        }else if (target < 0){
            return;
        }else {
            
            for(int i = pos ; i < arr.size() ; i++){
                
                // choose
                int temp = arr.get(i);
                chosen.add(temp);
                
                // explore
                combinationSumHelper(arr, list, target - temp , chosen,set,i);
                
                // un-choose
                chosen.remove(chosen.size() -1);
                
            }
            
            
        }
    }
}